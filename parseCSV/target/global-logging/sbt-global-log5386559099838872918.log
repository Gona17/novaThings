[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\eduro\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\eduro\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 1.8.0_291)
[debug]       Load.loadUnit: plugins took 83.4267ms
[debug]       Load.loadUnit: defsScala took 0.4511ms
[debug] [Loading] Scanning directory C:\Users\eduro\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\eduro\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 20.2523 ms
[debug]           Load.resolveProject(global-plugins) took 42.1995ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\eduro\.sbt\1.0\plugins, plugins: List(<none>))) took 86.3333ms
[debug] [Loading] Done in C:\Users\eduro\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 105.6608ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2463ms
[debug]     Load.loadUnit(file:/C:/Users/eduro/.sbt/1.0/plugins/, ...) took 198.8604ms
[debug]   Load.apply: load took 576.2873ms
[debug]   Load.apply: resolveProjects took 5.8129ms
[debug]   Load.apply: finalTransforms took 52.9909ms
[debug]   Load.apply: config.delegates took 7.5821ms
[debug]   Load.apply: Def.make(settings)... took 351.5728ms
[debug]   Load.apply: structureIndex took 94.5423ms
[debug]   Load.apply: mkStreams took 20.0183ms
[info] loading global plugins from C:\Users\eduro\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3085.1853ms
[debug]           Load.loadUnit: plugins took 26.9791ms
[debug]           Load.loadUnit: defsScala took 0.0116ms
[debug] [Loading] Scanning directory E:\Escritorio\Nova\parseCSV\project
[debug]             Load.loadUnit: mkEval took 9.9565ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\Escritorio\Nova\parseCSV\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.4742 ms
[info] loading settings for project parsecsv-build from idea.sbt ...
[debug]               Load.resolveProject(parsecsv-build) took 9.6429ms
[debug]             Load.loadTransitive: finalizeProject(Project(id parsecsv-build, base: E:\Escritorio\Nova\parseCSV\project, plugins: List(<none>))) took 12.9387ms
[debug] [Loading] Done in E:\Escritorio\Nova\parseCSV\project, returning: (parsecsv-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 218.152ms
[debug]           Load.loadUnit: cleanEvalClasses took 10.4242ms
[debug]         Load.loadUnit(file:/E:/Escritorio/Nova/parseCSV/project/, ...) took 256.9696ms
[debug]       Load.apply: load took 259.7895ms
[debug]       Load.apply: resolveProjects took 0.2725ms
[debug]       Load.apply: finalTransforms took 13.159ms
[debug]       Load.apply: config.delegates took 0.7973ms
[debug]       Load.apply: Def.make(settings)... took 92.3345ms
[debug]       Load.apply: structureIndex took 27.5908ms
[debug]       Load.apply: mkStreams took 0.0033ms
[info] loading project definition from E:\Escritorio\Nova\parseCSV\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 678.2064ms
[debug]     Load.loadUnit: defsScala took 0.0028ms
[debug] [Loading] Scanning directory E:\Escritorio\Nova\parseCSV
[debug]       Load.loadUnit: mkEval took 0.3609ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\Escritorio\Nova\parseCSV, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.3902 ms
[info] loading settings for project parsecsv from build.sbt ...
[debug]         Load.resolveProject(parsecsv) took 32.8863ms
[debug]       Load.loadTransitive: finalizeProject(Project(id parsecsv, base: E:\Escritorio\Nova\parseCSV, plugins: List(<none>))) took 36.5715ms
[debug] [Loading] Done in E:\Escritorio\Nova\parseCSV, returning: (parsecsv)
[debug]     Load.loadUnit: loadedProjectsRaw took 199.1326ms
[debug]     Load.loadUnit: cleanEvalClasses took 3.026ms
[debug]   Load.loadUnit(file:/E:/Escritorio/Nova/parseCSV/, ...) took 881.0842ms
[debug] Load.apply: load took 882.7239ms
[debug] Load.apply: resolveProjects took 0.1518ms
[debug] Load.apply: finalTransforms took 35.6467ms
[debug] Load.apply: config.delegates took 1.6241ms
[debug] Load.apply: Def.make(settings)... took 150.1297ms
[debug] Load.apply: structureIndex took 23.0491ms
[debug] Load.apply: mkStreams took 0.0029ms
[info] set current project to parseCSV (in build file:/E:/Escritorio/Nova/parseCSV/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 52691 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 52691, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to parseCSV (in build file:/E:/Escritorio/Nova/parseCSV/)
[debug] > Exec(idea-shell, None, None)
